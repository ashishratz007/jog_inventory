import 'package:jog_inventory/common/utils/date_formater.dart';
import 'package:jog_inventory/common/utils/validation.dart';
import 'package:jog_inventory/modules/material/models/fabric.dart';
import 'package:jog_inventory/modules/no_code/controllers/no_code_request.dart';
import 'package:jog_inventory/modules/no_code/models/no_code_item.dart';
import 'package:jog_inventory/modules/no_code/widgits/fabric_detail.dart';
import '../../../common/exports/main_export.dart';

class NoCodeRequestFormScreen extends GetView<NoCodeRequestController> {
  const NoCodeRequestFormScreen({super.key});

  NoCodeRequestController get controller =>
      getController<NoCodeRequestController>(NoCodeRequestController());

  @override
  Widget build(BuildContext context) {
    return CustomAppBar(
        title: Strings.noCodeRQ, body: body(), bottomNavBar: viewWidget());
  }

  Widget body() {
    controller.getItems();
    return SingleChildScrollView(
      padding: AppPadding.pagePadding,
      child: Form(
        key: controller.formKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(Strings.requisitionWithNoCode,
                style: appTextTheme.titleMedium),

            /// form
            gap(),
            Row(
              children: [
                // code
                Expanded(child: autoGenerateCodeWidget()),
                gap(),
                //date
                Expanded(child: dateWidget()),
              ],
            ),

            gap(),
            // note
            noteWidget(),

            Obx(
              () => Visibility(
                visible: controller.addedItems.length > 0,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    gap(),
                    ...displayList<NoCodeRQUsedItemModel>(
                        showGap: true,
                        items: controller.addedItems,
                        builder: (item, index) => itemTileWidget(item, index)),
                  ],
                ),
              ),
            ),

            ///
            gap(),
            safeAreaBottom(Get.context!),
          ],
        ),
      ),
    );
  }

  Widget autoGenerateCodeWidget() {
    return TextFieldWithLabel(
        labelText: Strings.autoGenCode,
        enabled: false,
        hintText: controller.autoGeneratedCodeStr);
  }

  Widget dateWidget() {
    return TextFieldWithLabel(
        labelText: Strings.date,
        enabled: false,
        hintText: appDateTimeFormat.toYYMMDDHHMMSS());
  }

  Widget noteWidget() {
    return Obx(
      () => TextFieldWithLabel(
          labelText: Strings.note,
          enabled: !controller.isCodeGenerated.value,
          hintText: Strings.enterComments,
          validator: appValidation.validateEmptyField,
          controller: controller.noteController,
          maxLines: controller.isCodeGenerated.value ? 1 : 2),
    );
  }

  Widget itemTileWidget(NoCodeRQUsedItemModel item, int index) {
    return Container(
        padding: AppPadding.inner,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(10),
          boxShadow: containerShadow(),
          color: Colours.white,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Text("${item.catName??""} , ",
                    style: appTextTheme.titleSmall
                        ?.copyWith(color: Colours.primaryText)),
                Text("${item.usedDetailColor??""}", style: appTextTheme.titleSmall?.copyWith()),
                Expanded(child: SizedBox()),
                IconButton(onPressed: (){
                  controller.deleteItem(item);
                }, icon: Icon(Icons.delete_outlined,size: 20,color: Colours.red,))
              ],
            ),
            // gap(space: 10),
            Row(
              children: [
                Expanded(
                    flex: 3,
                    child: displayTitleSubtitle(
                        "Type", "${item.typeId == 1 ? "Fabric" : ""}")),
                Expanded(
                    flex: 2,
                    child: displayTitleSubtitle(
                        "Used", "${item.usedDetailUsed} kg")),
              ],
            ),
            gap(space: 5),
            Row(
              children: [
                Expanded(
                    flex: 3,
                    child:
                        displayTitleSubtitle("NO", "${item.usedDetailNo} kg")),
                Expanded(
                    flex: 2,
                    child: displayTitleSubtitle(
                        "Price", "${item.usedDetailPrice?? 0}")),
              ],
            ),
            gap(space: 5),
            Row(
              children: [
                Expanded(
                    flex: 3,
                    child: displayTitleSubtitle(
                        "Balance", "${item.usedDetailSize} kg")),
                Expanded(
                    flex: 2,
                    child: displayTitleSubtitle(
                        "Total", "${item.usedDetailTotal ?? 0}")),
              ],
            ),
          ],
        ));
  }

  Widget displayTitleSubtitle(String title, String subtitle) {
    return Row(
      children: [
        Text(title,
            style: appTextTheme.titleSmall?.copyWith(color: Colours.greyLight)),
        gap(space: 10),
        Text(
          subtitle,
          style: appTextTheme.titleSmall?.copyWith(),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  Widget submitButton() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.center,
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Container(
          height: 50,
          child: ClipRRect(
              child: PrimaryButton(
            title: Strings.submit,
            onTap: () {},
            isFullWidth: false,
            radius: 15,
          )),
        ),
      ],
    );
  }

  Widget viewWidget() {
    return Obx(
      () => Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          gap(),
          Visibility(
            visible: !controller.isCodeGenerated.value,
            child: PrimaryButton(
                isBusy: controller.isBusy.value,
                title: "Submit",
                onTap: () {
                  controller.createNoCodeRequest();
                }),
          ),
          if (controller.isCodeGenerated.value) ...[
            Row(
              children: [
                // Expanded(
                //   child: CustomDropDownWithLabel(
                //     items: [],
                //     onChanged: (item) {},
                //     labelText: Strings.selectType,
                //     hintText: Strings.selectType,
                //   ),
                // ),
                // gap(),
                Expanded(
                  child: bottomSheetMenuWithLabel<FabricTypeModel>(
                    controller: controller.selectMaterialController,
                    items: [],
                    fromApi: () async {
                      var data = await FabricTypeModel.fetchAll();
                      return List.generate(
                          data.length,
                          (index) => DropDownItem<FabricTypeModel>(
                              id: index,
                              title: '${data[index].catNameEn}',
                              key: '${index}',
                              value: data[index]));
                    },
                    onChanged: (item) {
                      controller.categoryId =
                          item?.firstOrNull?.value?.catId?.toString();
                    },
                    labelText: Strings.selectMaterial,
                    hintText: Strings.selectMaterial,
                  ),
                ),
              ],
            ),
            gap(space: 10),
            dottedDivider(),
            gap(space: 10),
            Row(
              children: [
                Expanded(
                  child: ClipRRect(
                      child: PrimaryButton(
                    title: Strings.view,
                    color: Colours.greenLight,
                    leading: Icon(
                      Icons.remove_red_eye,
                      color: Colours.white,
                      size: 20,
                    ),
                    onTap: () {
                      if (controller.categoryId == null)
                        errorSnackBar(message: "Select material type");
                      else
                        openFabricDetailsPopup(controller.categoryId!,
                            onDone: () {
                          controller.selectMaterialController.resetItems;
                          controller.getItems();
                        });
                    },
                    isFullWidth: false,
                    radius: 15,
                  )),
                ),
              ],
            )
          ],
        ],
      ),
    );
  }
}
