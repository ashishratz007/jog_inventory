import 'package:jog_inventory/common/utils/date_formater.dart';
import 'package:jog_inventory/common/utils/error_message.dart';
import 'package:jog_inventory/modules/no_code/models/no_code.dart';
import 'package:jog_inventory/modules/no_code/models/no_code_item.dart';
import '../../../common/exports/main_export.dart';

class NoCodeRequestController extends GetxController {
  RxBool isLoading = false.obs;
  RxBool isBusy = false.obs;
  RxBool isCodeGenerated = false.obs;
  RxBool isForUpdate = false.obs;
  String? usedCode;
  RxList<NoCodeRQUsedItemModel> addedItems = <NoCodeRQUsedItemModel>[].obs;

  final GlobalKey<FormState> formKey = GlobalKey<FormState>();

  String autoGeneratedCodeStr = generateCodeFromDateTime();
  String currentDate = dateTimeFormat.toYYMMDDHHMMSS();
  TextEditingController noteController = TextEditingController();

  MenuItemsController selectMaterialController =
      MenuItemsController();
  String? categoryId;

  @override
  void onInit() {
    super.onInit();
  }

  @override
  void onReady() {
    super.onReady();
  }

  /// functions
  createNoCodeRequest() {
    if (formKey.currentState?.validate() ?? false) {
      isBusy.value = true;
      var data = NoCodeRequestModel(
          no_order_note: noteController.text,
          used_code: autoGeneratedCodeStr,
          used_date: currentDate);
      data.create().then((onValue) {
        usedCode = "${onValue.data['data']}";
        isCodeGenerated.value = true;
        isBusy.value = false;
      }).onError((error, trace) {
        isBusy.value = false;
        errorSnackBar(message: "Error posting data");
      });
    }
  }

  updateNoCodeRequest() {
    if (formKey.currentState?.validate() ?? false) {
      isBusy.value = true;
      NoCodeRequestModel.updateItems(addedItems).then((onValue) {
        isBusy.value = false;
        isForUpdate.value = false;
      }).onError((error, trace) {
        isBusy.value = false;
        errorSnackBar(message: "Error updating data");
      });
    }
  }

  /// get and register controller
  static NoCodeRequestController getController<T>() {
    var isRegistered = Get.isRegistered<NoCodeRequestController>();
    if (isRegistered) {
      return Get.find<NoCodeRequestController>();
    }
    return Get.put<NoCodeRequestController>(NoCodeRequestController());
  }

  /// api calls
  getItems() {
    if (usedCode == null) return;
    NoCodeRQUsedItemModel.fetchAll(usedCode!).then((value) {
      addedItems.value = value;
    }).onError((error, trace) {
      showErrorMessage(
        Get.context!,
        error: error,
        trace: trace,
        onRetry: () {
          getItems();
        },
      );
    });
  }

  deleteItem(NoCodeRQUsedItemModel item) {
    deleteItemPopup(Get.context!, onDelete: (context) async {
      await item.deleteItem().then((value) {
        addedItems.remove(item);
      }).onError((error, trace) {
        errorSnackBar(message: "Error deleting item");
      });
    });
  }
}
